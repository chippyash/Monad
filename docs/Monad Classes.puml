@startuml
title Monad classes

interface Monadic {
    value():mixed
    flatten():mixed
    bind(Closure:function, array:args = []):monadic
    {static} create(mixed:value):monadic
}

abstract class Monad {
    #mixed:value
    __invoke():mixed
}

class Identity {
    __construct(mixed:value)
}

abstract class Option {
    {static} create(mixed:value, mixed:noneValue=null):Some|None
    getOrElse(mixed:elseValue):mixed
}

class None {
    __construct(mixed:value = null)
    value():RuntimeException
    bind(Closure:function, array:args = []):None
    {static} create(mixed:value):None
}

class Some {
    __construct(mixed:value)
    bind(Closure:function, array:args = [], mixed:noneValue=null):Some|None
}

class FMatch {
    #mixed:value
    #bool:isMatched
    __construct(mixed:value, bool:isMatched)
    {static} on(mixed:value):Match
    __call(string:method, array:args=[]):Match
    any(Closure:function = null, array:$args = []):Match
}

abstract class FTry {
    {static} with(mixed:value):Success|Failure
    getOrElse(mixed:elseValue):mixed
    {abstract} isSuccess():bool
}

class Success {
    __construct(mixed:value)
    bind(Closure:function, array:args = []):Success|Failure
    isSuccess():bool(true)
}

class Failure {
    __construct(Exception:value)
     create(mixed:value = null):Failure
    bind(Closure:function, array:args = []):Failure
    pass():!!Exception
    isSuccess():bool(false)
}

class Collection <<ArrayAccess, IteratorAggregate, Countable>> {
    __construct(array:value = [], string:type = null)
    diff(Collection:other, Closure:function = null):Collection
    intersect(Collection:other, Closure:function = null):Collection
    vUnion(Collection:other):Collection
    kUnion(Collection:other):Collection
    head():Collection
    tail():Collection
    each():Collection
}

Monadic <-- Monad
Monadic <-- FMatch
Monadic <-- Collection
Monad <-- Identity
Monad <-- Option
Option <-- None
Option <-- Some
Monad <-- FTry
FTry <-- Success
FTry <-- Failure

@enduml